#!/usr/bin/env ruby -wKU
# encoding: UTF-8

# Scout Agent v3.2.5

# 
# This file configures Scout Agent.  The settings in
# here should get you started.  You can tweak these as the need arises.
# 
# Any Ruby code you would like run at start-up is a valid addition
# to this file.
# 

####################
### Basic Config ###
####################

# The key below is how the server identifies this machine:
config.agent_key = "<%= options[:agent_key] %>"

# The following is the URL used to reach the server:
config.server_url = "https://scoutapp.com"
# 
# Set the following if your HTTP requests need to go through a proxy.
# All non-XMPP requests between the agent and the server will go through
# this URL.
# 
config.proxy_url = <%= options[:proxy_url] || 'nil' %>

# 
# When the following is true, the agent will disconnect from the
# terminal that launches it and run in the background.  You can
# switch this to false to have the program stay connected and log
# to STDOUT.  This can be handy when debugging issues.
# 
# You can set this option to false for a single run with the
# command-line switch --no-daemon.
# 
config.run_as_daemon = <%= options[:run_as_daemon] || true %>

# 
# The following sets your logging level for the agent.  This setting can
# be one of "DEBUG", "INFO", "WARN", "ERROR", or "FATAL".  Messages
# below the seleted level will not be written to the logs.  "DEBUG" is
# intended for the developers as it includes some very low level data,
# "INFO" (the default) is good general purpose logging that will what
# the agent does as it works, and "WARN" is a good choice if you want
# to minimize log space taken but still see problems.  Logs are rotated 
# daily and deleted after seven days though, so you shouldn't need to
# worry about the agent filling up your hard drive.
#
# This agent includes a command to upload logs to our server.  This is
# never done automatically or without your permission, but it can help
# us troubleshoot issues on your box.  We will give you the proper
# command for this during a support request if we think it would help.
# Rest assured that agent logs do not contain sensative data.
# 
config.logging_level = "<%= options[:logging_level] || 'INFO' %>"

# 
# The XMPP features of the agent are used to allow the server to remain
# in contact.  The server can use this to send some simple commands to
# the agent as you interact with the Web interface.  The server may also
# use this to monitor when the agent is online.
# 
# This feature takes some extra memory due to maintaining the XMPP
# connection.  Set the following to false if you don't need this
# interactivity and you would prefer to see the agent run with a smaller
# footprint.
# 
config.enable_xmpp = <%= options[:enable_xmpp] || false %>

#####################
### Expert Config ###
#####################

# 
# The following setting causes the agent to attempt taking regular
# snapshots of the system.  An attempt is made before each check-in, but
# command intervals will usually only allow them to be run after a few
# check-ins.
#
# Change this setting to false if you would prefer to manage when
# snapshots are taken manually using the shell command or the API.
# 
config.periodic_snapshots = <%= options[:periodic_snapshot] || true %>

# 
# The following list of Jabber users are trusted to send the agent
# commands.  Only commands from from a user matching one of the names
# in this list will be executed.
# 
# The names in this list must match at the beginning of the user's name
# and stop at a word boundary.  Thus, all of the following would match
# the user "scout@scoutapp.com":
# 
#   scout
#   scout@scoutapp
#   scout@scoutapp.com
# 
# Note that the first name would match a "scout" user from any domain
# and the second would match a ".com", ".net", ".org", or whatever, but
# the third requires a full match.  However, "scout@scout" will not
# match "scout@scoutapp.com" since it doesn't end at a boundary.
# 
# There's also a special case where any name ending in "@*" is modified
# to have the "*" replaced with the host name from config.server_url.
#
# Feel free to add Jabber (XMPP) users to the list so they too can
# monitor and command the agent from their IM client.
# 
config.xmpp_trusted = %w[scout@* <%= options[:xmpp_trusted] %>]

# 
# The agent will try to use standard Unix locations to store its
# data, but you are free to adjust these paths as needed.
# 
# The prefix is prepended to all other paths, so you can change
# just that to move all agent related storage.  The other three
# paths are specific locations where resources will be stored,
# so you can adjust those separately if needed.
# 
# Note:  to have the prefix effect the location of this file or
# to set your OS's configuration path, you will need to use 
# command-line switches (--prefix and --os-config-path respectively).
# It wouldn't help to have those settings in this file as they are
# needed before this file is loaded.
# 
config.prefix_path = "<%= options[:prefix_path] || '/' %>"

config.os_db_path  = "<%= options[:os_db_path] || 'var/db' %>"
config.os_pid_path = "<%= options[:os_pid_path] || 'var/run' %>"
config.os_log_path = "<%= options[:os_log_path] || 'var/log' %>"

#
# The agent must be started with super user privileges so it can
# prepare the environment for a long run.  However, it will abandon
# these privileges once setup is complete to better protect your
# security.
# 
# The following are the list of users and groups the agent will
# try to switch to.  Choices are tried from left to right, so by
# default the "daemon" user is used but the agent will try
# "nobody" if daemon is not available.  These are standard users
# and groups for long running processes on Unix.
# 
# If you wish to improve security even more, we recommend creating
# a user and group called "scout_agent" and replacing these 
# defaults with what you created.  This puts you in full control
# of what the agent will have access to on your system and makes
# it easier to track what the agent is doing.
# 
config.user_choices  = %w[<%= options[:user_choices] || "daemon nobody" %>]
config.group_choices = %w[<%= options[:group_choices] || "daemon nogroup" %>]

############################
### Your Personal Config ###
############################

# Add any additional Ruby code you need to run at start-up below...
<%= options[:extra] %>